{"ast":null,"code":"import { ethers } from 'ethers';\nimport fundAbi from '../fund_abi.json';\nconst FUND_ADDRESS = \"0xeD1DB453C3156Ff3155a97AD217b3087D5Dc5f6E\";\nconst RPC_URL = \"http://127.0.0.1:8545\";\nconst CHAIN_ID = null;\n\n// Initialize provider and contract\nlet provider;\nlet fundContract;\nexport const initWeb3 = async () => {\n  try {\n    // Initialize provider\n    provider = new ethers.providers.JsonRpcProvider(RPC_URL);\n\n    // Get the network and log it\n    const network = await provider.getNetwork();\n    console.log('Connected to network:', network);\n\n    // Debug: Check if the contract exists at the address\n    const code = await provider.getCode(FUND_ADDRESS);\n    console.log('Contract code at address:', code.length > 2 ? 'Contract exists' : 'No contract found');\n\n    // Initialize contract\n    fundContract = new ethers.Contract(FUND_ADDRESS, fundAbi, provider);\n    return {\n      provider,\n      fundContract\n    };\n  } catch (error) {\n    console.error('Error initializing web3:', error);\n    throw error;\n  }\n};\nexport const getFundData = async () => {\n  try {\n    if (!fundContract) {\n      await initWeb3();\n    }\n\n    // Get contract data\n    let totalSupply = ethers.BigNumber.from(0);\n    try {\n      totalSupply = await fundContract.totalSupply();\n    } catch (e) {\n      console.warn('totalSupply function not found in contract');\n    }\n    return {\n      totalSupply: ethers.utils.formatEther(totalSupply)\n    };\n  } catch (error) {\n    console.error('Error getting fund data:', error);\n    return {\n      totalSupply: '0.0'\n    };\n  }\n};\nexport const getUserShares = async userAddress => {\n  try {\n    if (!fundContract) {\n      await initWeb3();\n    }\n    const shares = await fundContract.getShares(userAddress);\n    return ethers.utils.formatEther(shares);\n  } catch (error) {\n    console.error('Error getting user shares:', error);\n    return '0';\n  }\n};\n\n// Function to listen for events\nexport const getTransactionHistory = async () => {\n  try {\n    if (!fundContract) {\n      await initWeb3();\n    }\n\n    // Get past events\n    let depositEvents = [];\n    let withdrawEvents = [];\n    try {\n      // Try a different approach to get events\n      const filter = {\n        address: FUND_ADDRESS,\n        fromBlock: 0,\n        toBlock: 'latest'\n      };\n      const logs = await provider.getLogs(filter);\n      console.log('Found logs:', logs.length);\n\n      // Process logs to find deposit and withdrawal events\n      for (const log of logs) {\n        // Check event signatures\n        if (log.topics[0] === ethers.utils.id(\"sharesMinted(address,uint256)\")) {\n          depositEvents.push(log);\n        } else if (log.topics[0] === ethers.utils.id(\"withdrawnShares(address,uint256)\")) {\n          withdrawEvents.push(log);\n        }\n      }\n    } catch (e) {\n      console.warn('Error getting deposit events:', e);\n    }\n\n    // Format events\n    const deposits = depositEvents.map(event => ({\n      type: 'deposit',\n      user: '0x' + event.topics[1].slice(26),\n      // Extract address from topic\n      amount: ethers.utils.formatEther(ethers.BigNumber.from(event.data)),\n      timestamp: new Date(event.blockNumber * 1000),\n      // Approximate timestamp\n      transactionHash: event.transactionHash\n    }));\n    const withdrawals = withdrawEvents.map(event => ({\n      type: 'withdrawal',\n      user: '0x' + event.topics[1].slice(26),\n      // Extract address from topic\n      amount: ethers.utils.formatEther(ethers.BigNumber.from(event.data)),\n      timestamp: new Date(event.blockNumber * 1000),\n      // Approximate timestamp\n      transactionHash: event.transactionHash\n    }));\n\n    // Combine and sort by block number (descending)\n    return [...deposits, ...withdrawals].sort((a, b) => b.timestamp - a.timestamp);\n  } catch (error) {\n    console.error('Error getting transaction history:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["ethers","fundAbi","FUND_ADDRESS","RPC_URL","CHAIN_ID","provider","fundContract","initWeb3","providers","JsonRpcProvider","network","getNetwork","console","log","code","getCode","length","Contract","error","getFundData","totalSupply","BigNumber","from","e","warn","utils","formatEther","getUserShares","userAddress","shares","getShares","getTransactionHistory","depositEvents","withdrawEvents","filter","address","fromBlock","toBlock","logs","getLogs","topics","id","push","deposits","map","event","type","user","slice","amount","data","timestamp","Date","blockNumber","transactionHash","withdrawals","sort","a","b"],"sources":["/Users/misirov/projects/hackathon/eth_taipei/fund_agent/frontend/src/api/web3.js"],"sourcesContent":["import { ethers } from 'ethers';\nimport fundAbi from '../fund_abi.json';\n\nconst FUND_ADDRESS = \"0xeD1DB453C3156Ff3155a97AD217b3087D5Dc5f6E\";\nconst RPC_URL = \"http://127.0.0.1:8545\";\nconst CHAIN_ID = null;\n\n// Initialize provider and contract\nlet provider;\nlet fundContract;\n\nexport const initWeb3 = async () => {\n  try {\n    // Initialize provider\n    provider = new ethers.providers.JsonRpcProvider(RPC_URL);\n    \n    // Get the network and log it\n    const network = await provider.getNetwork();\n    console.log('Connected to network:', network);\n    \n    // Debug: Check if the contract exists at the address\n    const code = await provider.getCode(FUND_ADDRESS);\n    console.log('Contract code at address:', code.length > 2 ? 'Contract exists' : 'No contract found');\n    \n    // Initialize contract\n    fundContract = new ethers.Contract(FUND_ADDRESS, fundAbi, provider);\n    \n    return { provider, fundContract };\n  } catch (error) {\n    console.error('Error initializing web3:', error);\n    throw error;\n  }\n};\n\nexport const getFundData = async () => {\n  try {\n    if (!fundContract) {\n      await initWeb3();\n    }\n    \n    // Get contract data\n    let totalSupply = ethers.BigNumber.from(0);\n    \n    try {\n      totalSupply = await fundContract.totalSupply();\n    } catch (e) {\n      console.warn('totalSupply function not found in contract');\n    }\n    \n    return {\n      totalSupply: ethers.utils.formatEther(totalSupply),\n    };\n  } catch (error) {\n    console.error('Error getting fund data:', error);\n    return {\n      totalSupply: '0.0',\n    };\n  }\n};\n\nexport const getUserShares = async (userAddress) => {\n  try {\n    if (!fundContract) {\n      await initWeb3();\n    }\n    \n    const shares = await fundContract.getShares(userAddress);\n    return ethers.utils.formatEther(shares);\n  } catch (error) {\n    console.error('Error getting user shares:', error);\n    return '0';\n  }\n};\n\n// Function to listen for events\nexport const getTransactionHistory = async () => {\n  try {\n    if (!fundContract) {\n      await initWeb3();\n    }\n    \n    // Get past events\n    let depositEvents = [];\n    let withdrawEvents = [];\n    \n    try {\n      // Try a different approach to get events\n      const filter = {\n        address: FUND_ADDRESS,\n        fromBlock: 0,\n        toBlock: 'latest'\n      };\n      \n      const logs = await provider.getLogs(filter);\n      console.log('Found logs:', logs.length);\n      \n      // Process logs to find deposit and withdrawal events\n      for (const log of logs) {\n        // Check event signatures\n        if (log.topics[0] === ethers.utils.id(\"sharesMinted(address,uint256)\")) {\n          depositEvents.push(log);\n        } else if (log.topics[0] === ethers.utils.id(\"withdrawnShares(address,uint256)\")) {\n          withdrawEvents.push(log);\n        }\n      }\n    } catch (e) {\n      console.warn('Error getting deposit events:', e);\n    }\n    \n    // Format events\n    const deposits = depositEvents.map(event => ({\n      type: 'deposit',\n      user: '0x' + event.topics[1].slice(26),  // Extract address from topic\n      amount: ethers.utils.formatEther(ethers.BigNumber.from(event.data)),\n      timestamp: new Date(event.blockNumber * 1000), // Approximate timestamp\n      transactionHash: event.transactionHash,\n    }));\n    \n    const withdrawals = withdrawEvents.map(event => ({\n      type: 'withdrawal',\n      user: '0x' + event.topics[1].slice(26),  // Extract address from topic\n      amount: ethers.utils.formatEther(ethers.BigNumber.from(event.data)),\n      timestamp: new Date(event.blockNumber * 1000), // Approximate timestamp\n      transactionHash: event.transactionHash,\n    }));\n    \n    // Combine and sort by block number (descending)\n    return [...deposits, ...withdrawals].sort((a, b) => b.timestamp - a.timestamp);\n  } catch (error) {\n    console.error('Error getting transaction history:', error);\n    return [];\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
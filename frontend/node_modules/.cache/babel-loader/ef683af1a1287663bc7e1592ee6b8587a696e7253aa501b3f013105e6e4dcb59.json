{"ast":null,"code":"import { ethers } from 'ethers';\nimport fundAbi from '../fund_abi.json';\nexport const FUND_ADDRESS = \"0xA15BB66138824a1c7167f5E85b957d04Dd34E468\";\nconst RPC_URL = \"http://127.0.0.1:8545\";\n\n// Initialize provider and contract\nlet provider;\nlet fundContract;\nexport const initWeb3 = async () => {\n  try {\n    console.log('Initializing web3 with RPC URL:', RPC_URL);\n\n    // Initialize provider\n    provider = new ethers.providers.JsonRpcProvider(RPC_URL);\n\n    // Get the network and log it\n    const network = await provider.getNetwork();\n    console.log('Connected to network:', network);\n\n    // Debug: Check if the contract exists at the address\n    const code = await provider.getCode(FUND_ADDRESS);\n    console.log('Contract code at address:', code.length > 2 ? 'Contract exists' : 'No contract found');\n\n    // Initialize contract\n    fundContract = new ethers.Contract(FUND_ADDRESS, fundAbi, provider);\n    console.log('Contract initialized successfully');\n    return {\n      provider,\n      fundContract\n    };\n  } catch (error) {\n    console.error('Error initializing web3:', error);\n    throw error;\n  }\n};\nexport const getFundData = async () => {\n  try {\n    if (!fundContract) {\n      console.log('Contract not initialized, initializing now...');\n      await initWeb3();\n    }\n\n    // Get contract data\n    let totalSupply = ethers.BigNumber.from(0);\n\n    // Try up to 3 times to get the total supply\n    let attempts = 0;\n    const maxAttempts = 3;\n    try {\n      while (attempts < maxAttempts) {\n        try {\n          console.log(`Calling totalSupply() attempt ${attempts + 1}...`);\n          totalSupply = await fundContract.totalSupply();\n          console.log('Total supply raw value:', totalSupply.toString());\n          break; // Success, exit the loop\n        } catch (e) {\n          attempts++;\n          console.warn(`Attempt ${attempts} failed:`, e.message);\n          if (attempts >= maxAttempts) {\n            throw e; // Rethrow the error after max attempts\n          }\n\n          // Wait a bit before retrying\n          await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n      }\n    } catch (e) {\n      console.warn('totalSupply function not found in contract:', e);\n    }\n    const formattedSupply = ethers.utils.formatEther(totalSupply);\n    console.log('Formatted total supply:', formattedSupply);\n    return {\n      totalSupply: formattedSupply\n    };\n  } catch (error) {\n    console.error('Error getting fund data:', error);\n    return {\n      totalSupply: '0.0'\n    };\n  }\n};\nexport const getUserShares = async userAddress => {\n  try {\n    if (!fundContract) {\n      await initWeb3();\n    }\n    const shares = await fundContract.getShares(userAddress);\n    return ethers.utils.formatEther(shares);\n  } catch (error) {\n    console.error('Error getting user shares:', error);\n    return '0';\n  }\n};\n\n// Function to listen for events\nexport const getTransactionHistory = async () => {\n  try {\n    if (!fundContract) {\n      await initWeb3();\n    }\n\n    // Get past events\n    let depositEvents = [];\n    let withdrawEvents = [];\n    try {\n      // Try a different approach to get events\n      const filter = {\n        address: FUND_ADDRESS,\n        fromBlock: 0,\n        toBlock: 'latest'\n      };\n      const logs = await provider.getLogs(filter);\n      console.log('Found logs:', logs.length);\n\n      // Process logs to find deposit and withdrawal events\n      for (const log of logs) {\n        // Check event signatures\n        if (log.topics[0] === ethers.utils.id(\"sharesMinted(address,uint256)\")) {\n          depositEvents.push(log);\n        } else if (log.topics[0] === ethers.utils.id(\"withdrawnShares(address,uint256)\")) {\n          withdrawEvents.push(log);\n        }\n      }\n    } catch (e) {\n      console.warn('Error getting deposit events:', e);\n    }\n\n    // Format events\n    const deposits = depositEvents.map(event => ({\n      type: 'deposit',\n      user: '0x' + event.topics[1].slice(26),\n      // Extract address from topic\n      amount: ethers.utils.formatEther(ethers.BigNumber.from(event.data)),\n      timestamp: new Date(event.blockNumber * 1000),\n      // Approximate timestamp\n      transactionHash: event.transactionHash\n    }));\n    const withdrawals = withdrawEvents.map(event => ({\n      type: 'withdrawal',\n      user: '0x' + event.topics[1].slice(26),\n      // Extract address from topic\n      amount: ethers.utils.formatEther(ethers.BigNumber.from(event.data)),\n      timestamp: new Date(event.blockNumber * 1000),\n      // Approximate timestamp\n      transactionHash: event.transactionHash\n    }));\n\n    // Combine and sort by block number (descending)\n    return [...deposits, ...withdrawals].sort((a, b) => b.timestamp - a.timestamp);\n  } catch (error) {\n    console.error('Error getting transaction history:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["ethers","fundAbi","FUND_ADDRESS","RPC_URL","provider","fundContract","initWeb3","console","log","providers","JsonRpcProvider","network","getNetwork","code","getCode","length","Contract","error","getFundData","totalSupply","BigNumber","from","attempts","maxAttempts","toString","e","warn","message","Promise","resolve","setTimeout","formattedSupply","utils","formatEther","getUserShares","userAddress","shares","getShares","getTransactionHistory","depositEvents","withdrawEvents","filter","address","fromBlock","toBlock","logs","getLogs","topics","id","push","deposits","map","event","type","user","slice","amount","data","timestamp","Date","blockNumber","transactionHash","withdrawals","sort","a","b"],"sources":["/Users/misirov/projects/hackathon/eth_taipei/fund_agent/frontend/src/api/web3.js"],"sourcesContent":["import { ethers } from 'ethers';\nimport fundAbi from '../fund_abi.json';\n\nexport const FUND_ADDRESS = \"0xA15BB66138824a1c7167f5E85b957d04Dd34E468\";\nconst RPC_URL = \"http://127.0.0.1:8545\";\n\n// Initialize provider and contract\nlet provider;\nlet fundContract;\n\nexport const initWeb3 = async () => {\n  try {\n    console.log('Initializing web3 with RPC URL:', RPC_URL);\n    \n    // Initialize provider\n    provider = new ethers.providers.JsonRpcProvider(RPC_URL);\n    \n    // Get the network and log it\n    const network = await provider.getNetwork();\n    console.log('Connected to network:', network);\n    \n    // Debug: Check if the contract exists at the address\n    const code = await provider.getCode(FUND_ADDRESS);\n    console.log('Contract code at address:', code.length > 2 ? 'Contract exists' : 'No contract found');\n    \n    // Initialize contract\n    fundContract = new ethers.Contract(FUND_ADDRESS, fundAbi, provider);\n    console.log('Contract initialized successfully');\n    \n    return { provider, fundContract };\n  } catch (error) {\n    console.error('Error initializing web3:', error);\n    throw error;\n  }\n};\n\nexport const getFundData = async () => {\n  try {\n    if (!fundContract) {\n      console.log('Contract not initialized, initializing now...');\n      await initWeb3();\n    }\n    \n    // Get contract data\n    let totalSupply = ethers.BigNumber.from(0);\n    \n    // Try up to 3 times to get the total supply\n    let attempts = 0;\n    const maxAttempts = 3;\n    \n    try {\n      while (attempts < maxAttempts) {\n        try {\n          console.log(`Calling totalSupply() attempt ${attempts + 1}...`);\n          totalSupply = await fundContract.totalSupply();\n          console.log('Total supply raw value:', totalSupply.toString());\n          break; // Success, exit the loop\n        } catch (e) {\n          attempts++;\n          console.warn(`Attempt ${attempts} failed:`, e.message);\n          \n          if (attempts >= maxAttempts) {\n            throw e; // Rethrow the error after max attempts\n          }\n          \n          // Wait a bit before retrying\n          await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n      }\n    } catch (e) {\n      console.warn('totalSupply function not found in contract:', e);\n    }\n    \n    const formattedSupply = ethers.utils.formatEther(totalSupply);\n    console.log('Formatted total supply:', formattedSupply);\n    \n    return {\n      totalSupply: formattedSupply,\n    };\n  } catch (error) {\n    console.error('Error getting fund data:', error);\n    return {\n      totalSupply: '0.0',\n    };\n  }\n};\n\nexport const getUserShares = async (userAddress) => {\n  try {\n    if (!fundContract) {\n      await initWeb3();\n    }\n    \n    const shares = await fundContract.getShares(userAddress);\n    return ethers.utils.formatEther(shares);\n  } catch (error) {\n    console.error('Error getting user shares:', error);\n    return '0';\n  }\n};\n\n// Function to listen for events\nexport const getTransactionHistory = async () => {\n  try {\n    if (!fundContract) {\n      await initWeb3();\n    }\n    \n    // Get past events\n    let depositEvents = [];\n    let withdrawEvents = [];\n    \n    try {\n      // Try a different approach to get events\n      const filter = {\n        address: FUND_ADDRESS,\n        fromBlock: 0,\n        toBlock: 'latest'\n      };\n      \n      const logs = await provider.getLogs(filter);\n      console.log('Found logs:', logs.length);\n      \n      // Process logs to find deposit and withdrawal events\n      for (const log of logs) {\n        // Check event signatures\n        if (log.topics[0] === ethers.utils.id(\"sharesMinted(address,uint256)\")) {\n          depositEvents.push(log);\n        } else if (log.topics[0] === ethers.utils.id(\"withdrawnShares(address,uint256)\")) {\n          withdrawEvents.push(log);\n        }\n      }\n    } catch (e) {\n      console.warn('Error getting deposit events:', e);\n    }\n    \n    // Format events\n    const deposits = depositEvents.map(event => ({\n      type: 'deposit',\n      user: '0x' + event.topics[1].slice(26),  // Extract address from topic\n      amount: ethers.utils.formatEther(ethers.BigNumber.from(event.data)),\n      timestamp: new Date(event.blockNumber * 1000), // Approximate timestamp\n      transactionHash: event.transactionHash,\n    }));\n    \n    const withdrawals = withdrawEvents.map(event => ({\n      type: 'withdrawal',\n      user: '0x' + event.topics[1].slice(26),  // Extract address from topic\n      amount: ethers.utils.formatEther(ethers.BigNumber.from(event.data)),\n      timestamp: new Date(event.blockNumber * 1000), // Approximate timestamp\n      transactionHash: event.transactionHash,\n    }));\n    \n    // Combine and sort by block number (descending)\n    return [...deposits, ...withdrawals].sort((a, b) => b.timestamp - a.timestamp);\n  } catch (error) {\n    console.error('Error getting transaction history:', error);\n    return [];\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"const {\n  ethers\n} = require('ethers');\nconst fundAbi = require('./fund_abi.json');\n\n// Contract details\nconst FUND_ADDRESS = \"0xeD1DB453C3156Ff3155a97AD217b3087D5Dc5f6E\";\nconst RPC_URL = \"http://127.0.0.1:8545\";\nasync function debugContract() {\n  console.log('Starting contract debug...');\n  try {\n    // Connect to the provider\n    console.log('Connecting to provider:', RPC_URL);\n    const provider = new ethers.providers.JsonRpcProvider(RPC_URL);\n\n    // Get network information\n    const network = await provider.getNetwork();\n    console.log('Connected to network:', network);\n\n    // Get the latest block number\n    const blockNumber = await provider.getBlockNumber();\n    console.log('Current block number:', blockNumber);\n\n    // Check if contract exists\n    console.log('Checking contract at address:', FUND_ADDRESS);\n    const code = await provider.getCode(FUND_ADDRESS);\n    if (code === '0x') {\n      console.error('No contract found at the specified address');\n      return;\n    }\n    console.log('Contract exists at the specified address');\n\n    // Create contract instance\n    console.log('Creating contract instance...');\n    const fundContract = new ethers.Contract(FUND_ADDRESS, fundAbi, provider);\n\n    // Call contract functions\n    console.log('Calling contract functions...');\n    try {\n      const totalSupply = await fundContract.totalSupply();\n      console.log('Total Supply:', ethers.utils.formatEther(totalSupply));\n    } catch (error) {\n      console.error('Error calling totalSupply():', error.message);\n    }\n    try {\n      const totalShares = await fundContract.totalShares();\n      console.log('Total Shares:', ethers.utils.formatEther(totalShares));\n    } catch (error) {\n      console.error('Error calling totalShares():', error.message);\n    }\n    try {\n      const owner = await fundContract.owner();\n      console.log('Owner:', owner);\n    } catch (error) {\n      console.error('Error calling owner():', error.message);\n    }\n    try {\n      const token = await fundContract.token();\n      console.log('Token Address:', token);\n    } catch (error) {\n      console.error('Error calling token():', error.message);\n    }\n\n    // Try to get events\n    console.log('Fetching events...');\n    try {\n      // Get deposit events\n      const depositFilter = fundContract.filters.sharesMinted();\n      const depositEvents = await fundContract.queryFilter(depositFilter, -1000);\n      console.log('Found', depositEvents.length, 'deposit events');\n      if (depositEvents.length > 0) {\n        console.log('Sample deposit event:', {\n          user: depositEvents[0].args[0],\n          amount: ethers.utils.formatEther(depositEvents[0].args[1]),\n          blockNumber: depositEvents[0].blockNumber,\n          transactionHash: depositEvents[0].transactionHash\n        });\n      }\n    } catch (error) {\n      console.error('Error getting deposit events:', error.message);\n    }\n    try {\n      // Get withdrawal events\n      const withdrawFilter = fundContract.filters.withdrawnShares();\n      const withdrawEvents = await fundContract.queryFilter(withdrawFilter, -1000);\n      console.log('Found', withdrawEvents.length, 'withdrawal events');\n      if (withdrawEvents.length > 0) {\n        console.log('Sample withdrawal event:', {\n          user: withdrawEvents[0].args[0],\n          amount: ethers.utils.formatEther(withdrawEvents[0].args[1]),\n          blockNumber: withdrawEvents[0].blockNumber,\n          transactionHash: withdrawEvents[0].transactionHash\n        });\n      }\n    } catch (error) {\n      console.error('Error getting withdrawal events:', error.message);\n    }\n\n    // Try to get logs directly\n    console.log('Fetching logs directly...');\n    try {\n      const filter = {\n        address: FUND_ADDRESS,\n        fromBlock: blockNumber - 1000,\n        toBlock: 'latest'\n      };\n      const logs = await provider.getLogs(filter);\n      console.log('Found', logs.length, 'logs');\n      if (logs.length > 0) {\n        console.log('Sample log:', logs[0]);\n      }\n    } catch (error) {\n      console.error('Error getting logs:', error.message);\n    }\n    console.log('Contract debug completed');\n  } catch (error) {\n    console.error('Error in debug process:', error);\n  }\n}\n\n// Run the debug function\ndebugContract().then(() => console.log('Debug script finished'));\nmodule.exports = debugContract;","map":{"version":3,"names":["ethers","require","fundAbi","FUND_ADDRESS","RPC_URL","debugContract","console","log","provider","providers","JsonRpcProvider","network","getNetwork","blockNumber","getBlockNumber","code","getCode","error","fundContract","Contract","totalSupply","utils","formatEther","message","totalShares","owner","token","depositFilter","filters","sharesMinted","depositEvents","queryFilter","length","user","args","amount","transactionHash","withdrawFilter","withdrawnShares","withdrawEvents","filter","address","fromBlock","toBlock","logs","getLogs","then","module","exports"],"sources":["/Users/misirov/projects/hackathon/eth_taipei/fund_agent/frontend/src/debug-contract.js"],"sourcesContent":["const { ethers } = require('ethers');\nconst fundAbi = require('./fund_abi.json');\n\n// Contract details\nconst FUND_ADDRESS = \"0xeD1DB453C3156Ff3155a97AD217b3087D5Dc5f6E\";\nconst RPC_URL = \"http://127.0.0.1:8545\";\n\nasync function debugContract() {\n  console.log('Starting contract debug...');\n  \n  try {\n    // Connect to the provider\n    console.log('Connecting to provider:', RPC_URL);\n    const provider = new ethers.providers.JsonRpcProvider(RPC_URL);\n    \n    // Get network information\n    const network = await provider.getNetwork();\n    console.log('Connected to network:', network);\n    \n    // Get the latest block number\n    const blockNumber = await provider.getBlockNumber();\n    console.log('Current block number:', blockNumber);\n    \n    // Check if contract exists\n    console.log('Checking contract at address:', FUND_ADDRESS);\n    const code = await provider.getCode(FUND_ADDRESS);\n    if (code === '0x') {\n      console.error('No contract found at the specified address');\n      return;\n    }\n    console.log('Contract exists at the specified address');\n    \n    // Create contract instance\n    console.log('Creating contract instance...');\n    const fundContract = new ethers.Contract(FUND_ADDRESS, fundAbi, provider);\n    \n    // Call contract functions\n    console.log('Calling contract functions...');\n    \n    try {\n      const totalSupply = await fundContract.totalSupply();\n      console.log('Total Supply:', ethers.utils.formatEther(totalSupply));\n    } catch (error) {\n      console.error('Error calling totalSupply():', error.message);\n    }\n    \n    try {\n      const totalShares = await fundContract.totalShares();\n      console.log('Total Shares:', ethers.utils.formatEther(totalShares));\n    } catch (error) {\n      console.error('Error calling totalShares():', error.message);\n    }\n    \n    try {\n      const owner = await fundContract.owner();\n      console.log('Owner:', owner);\n    } catch (error) {\n      console.error('Error calling owner():', error.message);\n    }\n    \n    try {\n      const token = await fundContract.token();\n      console.log('Token Address:', token);\n    } catch (error) {\n      console.error('Error calling token():', error.message);\n    }\n    \n    // Try to get events\n    console.log('Fetching events...');\n    \n    try {\n      // Get deposit events\n      const depositFilter = fundContract.filters.sharesMinted();\n      const depositEvents = await fundContract.queryFilter(depositFilter, -1000);\n      console.log('Found', depositEvents.length, 'deposit events');\n      \n      if (depositEvents.length > 0) {\n        console.log('Sample deposit event:', {\n          user: depositEvents[0].args[0],\n          amount: ethers.utils.formatEther(depositEvents[0].args[1]),\n          blockNumber: depositEvents[0].blockNumber,\n          transactionHash: depositEvents[0].transactionHash\n        });\n      }\n    } catch (error) {\n      console.error('Error getting deposit events:', error.message);\n    }\n    \n    try {\n      // Get withdrawal events\n      const withdrawFilter = fundContract.filters.withdrawnShares();\n      const withdrawEvents = await fundContract.queryFilter(withdrawFilter, -1000);\n      console.log('Found', withdrawEvents.length, 'withdrawal events');\n      \n      if (withdrawEvents.length > 0) {\n        console.log('Sample withdrawal event:', {\n          user: withdrawEvents[0].args[0],\n          amount: ethers.utils.formatEther(withdrawEvents[0].args[1]),\n          blockNumber: withdrawEvents[0].blockNumber,\n          transactionHash: withdrawEvents[0].transactionHash\n        });\n      }\n    } catch (error) {\n      console.error('Error getting withdrawal events:', error.message);\n    }\n    \n    // Try to get logs directly\n    console.log('Fetching logs directly...');\n    \n    try {\n      const filter = {\n        address: FUND_ADDRESS,\n        fromBlock: blockNumber - 1000,\n        toBlock: 'latest'\n      };\n      \n      const logs = await provider.getLogs(filter);\n      console.log('Found', logs.length, 'logs');\n      \n      if (logs.length > 0) {\n        console.log('Sample log:', logs[0]);\n      }\n    } catch (error) {\n      console.error('Error getting logs:', error.message);\n    }\n    \n    console.log('Contract debug completed');\n  } catch (error) {\n    console.error('Error in debug process:', error);\n  }\n}\n\n// Run the debug function\ndebugContract().then(() => console.log('Debug script finished'));\n\nmodule.exports = debugContract; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
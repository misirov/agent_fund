{"ast":null,"code":"import { ethers } from 'ethers';\nimport fundAbi from '../fund_abi.json';\nconst FUND_ADDRESS = \"0xA15BB66138824a1c7167f5E85b957d04Dd34E468\"; //process.env.REACT_APP_FUND_ADDRESS;\nconst RPC_URL = \"http://127.0.0.1:8545\";\nconst CHAIN_ID = parseInt(process.env.REACT_APP_CHAIN_ID || '31337');\n\n// Initialize provider and contract\nlet provider;\nlet fundContract;\nexport const initWeb3 = async () => {\n  try {\n    // Initialize provider\n    provider = new ethers.providers.JsonRpcProvider(RPC_URL, CHAIN_ID);\n\n    // Initialize contract\n    fundContract = new ethers.Contract(FUND_ADDRESS, fundAbi, provider);\n    return {\n      provider,\n      fundContract\n    };\n  } catch (error) {\n    console.error('Error initializing web3:', error);\n    throw error;\n  }\n};\nexport const getFundData = async () => {\n  try {\n    if (!fundContract) {\n      await initWeb3();\n    }\n\n    // Get contract data\n    let totalSupply = ethers.BigNumber.from(0);\n    let totalShares = ethers.BigNumber.from(0);\n    let owner = 'Unknown';\n    let tokenAddress = 'Unknown';\n    try {\n      totalSupply = await fundContract.totalSupply();\n    } catch (e) {\n      console.warn('totalSupply function not found in contract');\n    }\n    try {\n      totalShares = await fundContract.totalShares();\n    } catch (e) {\n      console.warn('totalShares function not found in contract');\n    }\n    try {\n      owner = await fundContract.owner();\n    } catch (e) {\n      console.warn('owner function not found in contract');\n    }\n    try {\n      tokenAddress = await fundContract.token();\n    } catch (e) {\n      console.warn('token function not found in contract');\n    }\n\n    // Format data\n    return {\n      totalSupply: ethers.utils.formatEther(totalSupply),\n      totalShares: ethers.utils.formatEther(totalShares),\n      owner,\n      tokenAddress\n    };\n  } catch (error) {\n    console.error('Error getting fund data:', error);\n    return {\n      totalSupply: '0',\n      totalShares: '0',\n      owner: 'Unknown',\n      tokenAddress: 'Unknown'\n    };\n  }\n};\nexport const getUserShares = async userAddress => {\n  try {\n    if (!fundContract) {\n      await initWeb3();\n    }\n    const shares = await fundContract.getShares(userAddress);\n    return ethers.utils.formatEther(shares);\n  } catch (error) {\n    console.error('Error getting user shares:', error);\n    return '0';\n  }\n};\n\n// Function to listen for events\nexport const getTransactionHistory = async () => {\n  try {\n    if (!fundContract) {\n      await initWeb3();\n    }\n\n    // Get past events\n    let depositEvents = [];\n    let withdrawEvents = [];\n    try {\n      const depositFilter = fundContract.filters.sharesMinted();\n      depositEvents = await fundContract.queryFilter(depositFilter, -10000);\n    } catch (e) {\n      console.warn('sharesMinted event not found in contract');\n    }\n    try {\n      const withdrawFilter = fundContract.filters.withdrawnShares();\n      withdrawEvents = await fundContract.queryFilter(withdrawFilter, -10000);\n    } catch (e) {\n      console.warn('withdrawnShares event not found in contract');\n    }\n\n    // Format events\n    const deposits = depositEvents.map(event => ({\n      type: 'deposit',\n      user: event.args[0],\n      amount: ethers.utils.formatEther(event.args[1]),\n      timestamp: new Date(event.blockNumber * 1000),\n      // Approximate timestamp\n      transactionHash: event.transactionHash\n    }));\n    const withdrawals = withdrawEvents.map(event => ({\n      type: 'withdrawal',\n      user: event.args[0],\n      amount: ethers.utils.formatEther(event.args[1]),\n      timestamp: new Date(event.blockNumber * 1000),\n      // Approximate timestamp\n      transactionHash: event.transactionHash\n    }));\n\n    // Combine and sort by block number (descending)\n    return [...deposits, ...withdrawals].sort((a, b) => b.timestamp - a.timestamp);\n  } catch (error) {\n    console.error('Error getting transaction history:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["ethers","fundAbi","FUND_ADDRESS","RPC_URL","CHAIN_ID","parseInt","process","env","REACT_APP_CHAIN_ID","provider","fundContract","initWeb3","providers","JsonRpcProvider","Contract","error","console","getFundData","totalSupply","BigNumber","from","totalShares","owner","tokenAddress","e","warn","token","utils","formatEther","getUserShares","userAddress","shares","getShares","getTransactionHistory","depositEvents","withdrawEvents","depositFilter","filters","sharesMinted","queryFilter","withdrawFilter","withdrawnShares","deposits","map","event","type","user","args","amount","timestamp","Date","blockNumber","transactionHash","withdrawals","sort","a","b"],"sources":["/Users/misirov/projects/hackathon/eth_taipei/fund_agent/frontend/src/api/web3.js"],"sourcesContent":["import { ethers } from 'ethers';\nimport fundAbi from '../fund_abi.json';\n\nconst FUND_ADDRESS = \"0xA15BB66138824a1c7167f5E85b957d04Dd34E468\"//process.env.REACT_APP_FUND_ADDRESS;\nconst RPC_URL = \"http://127.0.0.1:8545\";\nconst CHAIN_ID = parseInt(process.env.REACT_APP_CHAIN_ID || '31337');\n\n// Initialize provider and contract\nlet provider;\nlet fundContract;\n\nexport const initWeb3 = async () => {\n  try {\n    // Initialize provider\n    provider = new ethers.providers.JsonRpcProvider(RPC_URL, CHAIN_ID);\n    \n    // Initialize contract\n    fundContract = new ethers.Contract(FUND_ADDRESS, fundAbi, provider);\n    \n    return { provider, fundContract };\n  } catch (error) {\n    console.error('Error initializing web3:', error);\n    throw error;\n  }\n};\n\nexport const getFundData = async () => {\n  try {\n    if (!fundContract) {\n      await initWeb3();\n    }\n    \n    // Get contract data\n    let totalSupply = ethers.BigNumber.from(0);\n    let totalShares = ethers.BigNumber.from(0);\n    let owner = 'Unknown';\n    let tokenAddress = 'Unknown';\n    \n    try {\n      totalSupply = await fundContract.totalSupply();\n    } catch (e) {\n      console.warn('totalSupply function not found in contract');\n    }\n    \n    try {\n      totalShares = await fundContract.totalShares();\n    } catch (e) {\n      console.warn('totalShares function not found in contract');\n    }\n    \n    try {\n      owner = await fundContract.owner();\n    } catch (e) {\n      console.warn('owner function not found in contract');\n    }\n    \n    try {\n      tokenAddress = await fundContract.token();\n    } catch (e) {\n      console.warn('token function not found in contract');\n    }\n    \n    // Format data\n    return {\n      totalSupply: ethers.utils.formatEther(totalSupply),\n      totalShares: ethers.utils.formatEther(totalShares),\n      owner,\n      tokenAddress,\n    };\n  } catch (error) {\n    console.error('Error getting fund data:', error);\n    return {\n      totalSupply: '0',\n      totalShares: '0',\n      owner: 'Unknown',\n      tokenAddress: 'Unknown',\n    };\n  }\n};\n\nexport const getUserShares = async (userAddress) => {\n  try {\n    if (!fundContract) {\n      await initWeb3();\n    }\n    \n    const shares = await fundContract.getShares(userAddress);\n    return ethers.utils.formatEther(shares);\n  } catch (error) {\n    console.error('Error getting user shares:', error);\n    return '0';\n  }\n};\n\n// Function to listen for events\nexport const getTransactionHistory = async () => {\n  try {\n    if (!fundContract) {\n      await initWeb3();\n    }\n    \n    // Get past events\n    let depositEvents = [];\n    let withdrawEvents = [];\n    \n    try {\n      const depositFilter = fundContract.filters.sharesMinted();\n      depositEvents = await fundContract.queryFilter(depositFilter, -10000);\n    } catch (e) {\n      console.warn('sharesMinted event not found in contract');\n    }\n    \n    try {\n      const withdrawFilter = fundContract.filters.withdrawnShares();\n      withdrawEvents = await fundContract.queryFilter(withdrawFilter, -10000);\n    } catch (e) {\n      console.warn('withdrawnShares event not found in contract');\n    }\n    \n    // Format events\n    const deposits = depositEvents.map(event => ({\n      type: 'deposit',\n      user: event.args[0],\n      amount: ethers.utils.formatEther(event.args[1]),\n      timestamp: new Date(event.blockNumber * 1000), // Approximate timestamp\n      transactionHash: event.transactionHash,\n    }));\n    \n    const withdrawals = withdrawEvents.map(event => ({\n      type: 'withdrawal',\n      user: event.args[0],\n      amount: ethers.utils.formatEther(event.args[1]),\n      timestamp: new Date(event.blockNumber * 1000), // Approximate timestamp\n      transactionHash: event.transactionHash,\n    }));\n    \n    // Combine and sort by block number (descending)\n    return [...deposits, ...withdrawals].sort((a, b) => b.timestamp - a.timestamp);\n  } catch (error) {\n    console.error('Error getting transaction history:', error);\n    return [];\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { ethers } from 'ethers';\nimport fundAbi from '../fund_abi.json';\n\n// Load environment variables\nexport const FUND_ADDRESS = process.env.REACT_APP_FUND_ADDRESS || \"0xA15BB66138824a1c7167f5E85b957d04Dd34E468\";\nconst RPC_URL = process.env.REACT_APP_RPC_URL || \"http://127.0.0.1:8545\";\nconsole.log('Using contract address:', FUND_ADDRESS);\nconsole.log('Using RPC URL:', RPC_URL);\n\n// Initialize provider and contract\nlet provider;\nlet fundContract;\nexport const initWeb3 = async () => {\n  try {\n    console.log('Initializing web3 with RPC URL:', RPC_URL);\n\n    // Initialize provider\n    provider = new ethers.providers.JsonRpcProvider(RPC_URL);\n\n    // Get the network and log it\n    const network = await provider.getNetwork();\n    console.log('Connected to network:', network);\n\n    // Debug: Check if the contract exists at the address\n    const code = await provider.getCode(FUND_ADDRESS);\n    console.log('Contract code at address:', code.length > 2 ? 'Contract exists' : 'No contract found');\n\n    // Initialize contract\n    fundContract = new ethers.Contract(FUND_ADDRESS, fundAbi, provider);\n    console.log('Contract initialized successfully');\n    return {\n      provider,\n      fundContract\n    };\n  } catch (error) {\n    console.error('Error initializing web3:', error);\n    throw error;\n  }\n};\nexport const getFundData = async () => {\n  try {\n    if (!fundContract) {\n      console.log('Contract not initialized, initializing now...');\n      await initWeb3();\n    }\n\n    // Get contract data\n    let totalSupply = ethers.BigNumber.from(0);\n\n    // Try up to 3 times to get the total supply\n    let attempts = 0;\n    const maxAttempts = 3;\n    try {\n      while (attempts < maxAttempts) {\n        try {\n          console.log(`Calling totalSupply() attempt ${attempts + 1}...`);\n          totalSupply = await fundContract.totalSupply();\n          console.log('Total supply raw value:', totalSupply.toString());\n          break; // Success, exit the loop\n        } catch (e) {\n          attempts++;\n          console.warn(`Attempt ${attempts} failed:`, e.message);\n          if (attempts >= maxAttempts) {\n            throw e; // Rethrow the error after max attempts\n          }\n\n          // Wait a bit before retrying\n          await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n      }\n    } catch (e) {\n      console.warn('totalSupply function not found in contract:', e);\n    }\n    const formattedSupply = ethers.utils.formatEther(totalSupply);\n    console.log('Formatted total supply:', formattedSupply);\n    return {\n      totalSupply: formattedSupply\n    };\n  } catch (error) {\n    console.error('Error getting fund data:', error);\n    return {\n      totalSupply: '0.0'\n    };\n  }\n};\nexport const getUserShares = async userAddress => {\n  try {\n    if (!fundContract) {\n      await initWeb3();\n    }\n    const shares = await fundContract.getShares(userAddress);\n    return ethers.utils.formatEther(shares);\n  } catch (error) {\n    console.error('Error getting user shares:', error);\n    return '0';\n  }\n};\n\n// Function to listen for events\nexport const getTransactionHistory = async () => {\n  try {\n    if (!fundContract) {\n      await initWeb3();\n    }\n    try {\n      console.log('Fetching events using queryFilter...');\n\n      // Get the current block number\n      const currentBlock = await provider.getBlockNumber();\n      console.log('Current block number:', currentBlock);\n\n      // Use a smaller block range to avoid timeouts\n      const fromBlock = Math.max(0, currentBlock - 10000); // Look at the last 10000 blocks\n\n      // Create filters for the events\n      console.log(`Querying events from block ${fromBlock} to latest...`);\n\n      // Get deposit events (sharesMinted)\n      const depositFilter = fundContract.filters.sharesMinted();\n      const depositEvents = await fundContract.queryFilter(depositFilter, fromBlock, 'latest');\n      console.log(`Found ${depositEvents.length} deposit events`);\n\n      // Get withdrawal events (withdrawnShares)\n      const withdrawFilter = fundContract.filters.withdrawnShares();\n      const withdrawEvents = await fundContract.queryFilter(withdrawFilter, fromBlock, 'latest');\n      console.log(`Found ${withdrawEvents.length} withdrawal events`);\n\n      // Format events\n      const deposits = depositEvents.map(event => ({\n        type: 'deposit',\n        user: event.args[0],\n        // First argument is the user address\n        amount: ethers.utils.formatEther(event.args[1]),\n        // Second argument is the amount\n        timestamp: new Date(),\n        // We'll need to get the block timestamp\n        transactionHash: event.transactionHash,\n        blockNumber: event.blockNumber\n      }));\n      const withdrawals = withdrawEvents.map(event => ({\n        type: 'withdrawal',\n        user: event.args[0],\n        // First argument is the user address\n        amount: ethers.utils.formatEther(event.args[1]),\n        // Second argument is the amount\n        timestamp: new Date(),\n        // We'll need to get the block timestamp\n        transactionHash: event.transactionHash,\n        blockNumber: event.blockNumber\n      }));\n\n      // Get block timestamps for each event\n      const transactions = [...deposits, ...withdrawals];\n\n      // Get unique block numbers\n      const blockNumbers = [...new Set(transactions.map(tx => tx.blockNumber))];\n\n      // Get block timestamps\n      const blocks = await Promise.all(blockNumbers.map(blockNumber => provider.getBlock(blockNumber)));\n\n      // Create a map of block number to timestamp\n      const blockTimestamps = {};\n      blocks.forEach(block => {\n        blockTimestamps[block.number] = block.timestamp * 1000; // Convert to milliseconds\n      });\n\n      // Update timestamps\n      transactions.forEach(tx => {\n        tx.timestamp = new Date(blockTimestamps[tx.blockNumber]);\n        delete tx.blockNumber; // Remove blockNumber as it's no longer needed\n      });\n\n      // Sort by timestamp (descending)\n      transactions.sort((a, b) => b.timestamp - a.timestamp);\n      return transactions;\n    } catch (e) {\n      console.warn('Error getting logs:', e);\n\n      // Check if it's the specific \"no backend is currently healthy\" error\n      if (e.message && e.message.includes('no backend is currently healthy')) {\n        console.log('RPC endpoint is overloaded. Using mock data for demonstration...');\n\n        // Create some mock data for demonstration purposes\n        return [{\n          type: 'deposit',\n          user: '0xa0Ee7A142d267C1f36714E4a8F75612F20a79720',\n          amount: '5.01',\n          timestamp: new Date(),\n          transactionHash: '0x123456789abcdef'\n        }, {\n          type: 'deposit',\n          user: '0xb0Ee7A142d267C1f36714E4a8F75612F20a79721',\n          amount: '3.5',\n          timestamp: new Date(Date.now() - 86400000),\n          // 1 day ago\n          transactionHash: '0x223456789abcdef'\n        }, {\n          type: 'withdrawal',\n          user: '0xa0Ee7A142d267C1f36714E4a8F75612F20a79720',\n          amount: '1.5',\n          timestamp: new Date(Date.now() - 43200000),\n          // 12 hours ago\n          transactionHash: '0x323456789abcdef'\n        }];\n      }\n\n      // For other errors, rethrow\n      throw e;\n    }\n  } catch (error) {\n    console.error('Error getting transaction history:', error);\n\n    // If we get here, something went wrong but we still want to show something\n    console.log('Falling back to empty transaction list');\n    return [];\n  }\n};","map":{"version":3,"names":["ethers","fundAbi","FUND_ADDRESS","process","env","REACT_APP_FUND_ADDRESS","RPC_URL","REACT_APP_RPC_URL","console","log","provider","fundContract","initWeb3","providers","JsonRpcProvider","network","getNetwork","code","getCode","length","Contract","error","getFundData","totalSupply","BigNumber","from","attempts","maxAttempts","toString","e","warn","message","Promise","resolve","setTimeout","formattedSupply","utils","formatEther","getUserShares","userAddress","shares","getShares","getTransactionHistory","currentBlock","getBlockNumber","fromBlock","Math","max","depositFilter","filters","sharesMinted","depositEvents","queryFilter","withdrawFilter","withdrawnShares","withdrawEvents","deposits","map","event","type","user","args","amount","timestamp","Date","transactionHash","blockNumber","withdrawals","transactions","blockNumbers","Set","tx","blocks","all","getBlock","blockTimestamps","forEach","block","number","sort","a","b","includes","now"],"sources":["/Users/misirov/projects/hackathon/eth_taipei/fund_agent/frontend/src/api/web3.js"],"sourcesContent":["import { ethers } from 'ethers';\nimport fundAbi from '../fund_abi.json';\n\n// Load environment variables\nexport const FUND_ADDRESS = process.env.REACT_APP_FUND_ADDRESS || \"0xA15BB66138824a1c7167f5E85b957d04Dd34E468\";\nconst RPC_URL = process.env.REACT_APP_RPC_URL || \"http://127.0.0.1:8545\";\n\nconsole.log('Using contract address:', FUND_ADDRESS);\nconsole.log('Using RPC URL:', RPC_URL);\n\n// Initialize provider and contract\nlet provider;\nlet fundContract;\n\nexport const initWeb3 = async () => {\n  try {\n    console.log('Initializing web3 with RPC URL:', RPC_URL);\n    \n    // Initialize provider\n    provider = new ethers.providers.JsonRpcProvider(RPC_URL);\n    \n    // Get the network and log it\n    const network = await provider.getNetwork();\n    console.log('Connected to network:', network);\n    \n    // Debug: Check if the contract exists at the address\n    const code = await provider.getCode(FUND_ADDRESS);\n    console.log('Contract code at address:', code.length > 2 ? 'Contract exists' : 'No contract found');\n    \n    // Initialize contract\n    fundContract = new ethers.Contract(FUND_ADDRESS, fundAbi, provider);\n    console.log('Contract initialized successfully');\n    \n    return { provider, fundContract };\n  } catch (error) {\n    console.error('Error initializing web3:', error);\n    throw error;\n  }\n};\n\nexport const getFundData = async () => {\n  try {\n    if (!fundContract) {\n      console.log('Contract not initialized, initializing now...');\n      await initWeb3();\n    }\n    \n    // Get contract data\n    let totalSupply = ethers.BigNumber.from(0);\n    \n    // Try up to 3 times to get the total supply\n    let attempts = 0;\n    const maxAttempts = 3;\n    \n    try {\n      while (attempts < maxAttempts) {\n        try {\n          console.log(`Calling totalSupply() attempt ${attempts + 1}...`);\n          totalSupply = await fundContract.totalSupply();\n          console.log('Total supply raw value:', totalSupply.toString());\n          break; // Success, exit the loop\n        } catch (e) {\n          attempts++;\n          console.warn(`Attempt ${attempts} failed:`, e.message);\n          \n          if (attempts >= maxAttempts) {\n            throw e; // Rethrow the error after max attempts\n          }\n          \n          // Wait a bit before retrying\n          await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n      }\n    } catch (e) {\n      console.warn('totalSupply function not found in contract:', e);\n    }\n    \n    const formattedSupply = ethers.utils.formatEther(totalSupply);\n    console.log('Formatted total supply:', formattedSupply);\n    \n    return {\n      totalSupply: formattedSupply,\n    };\n  } catch (error) {\n    console.error('Error getting fund data:', error);\n    return {\n      totalSupply: '0.0',\n    };\n  }\n};\n\nexport const getUserShares = async (userAddress) => {\n  try {\n    if (!fundContract) {\n      await initWeb3();\n    }\n    \n    const shares = await fundContract.getShares(userAddress);\n    return ethers.utils.formatEther(shares);\n  } catch (error) {\n    console.error('Error getting user shares:', error);\n    return '0';\n  }\n};\n\n// Function to listen for events\nexport const getTransactionHistory = async () => {\n  try {\n    if (!fundContract) {\n      await initWeb3();\n    }\n    \n    try {\n      console.log('Fetching events using queryFilter...');\n      \n      // Get the current block number\n      const currentBlock = await provider.getBlockNumber();\n      console.log('Current block number:', currentBlock);\n      \n      // Use a smaller block range to avoid timeouts\n      const fromBlock = Math.max(0, currentBlock - 10000); // Look at the last 10000 blocks\n      \n      // Create filters for the events\n      console.log(`Querying events from block ${fromBlock} to latest...`);\n      \n      // Get deposit events (sharesMinted)\n      const depositFilter = fundContract.filters.sharesMinted();\n      const depositEvents = await fundContract.queryFilter(depositFilter, fromBlock, 'latest');\n      console.log(`Found ${depositEvents.length} deposit events`);\n      \n      // Get withdrawal events (withdrawnShares)\n      const withdrawFilter = fundContract.filters.withdrawnShares();\n      const withdrawEvents = await fundContract.queryFilter(withdrawFilter, fromBlock, 'latest');\n      console.log(`Found ${withdrawEvents.length} withdrawal events`);\n      \n      // Format events\n      const deposits = depositEvents.map(event => ({\n        type: 'deposit',\n        user: event.args[0], // First argument is the user address\n        amount: ethers.utils.formatEther(event.args[1]), // Second argument is the amount\n        timestamp: new Date(), // We'll need to get the block timestamp\n        transactionHash: event.transactionHash,\n        blockNumber: event.blockNumber\n      }));\n      \n      const withdrawals = withdrawEvents.map(event => ({\n        type: 'withdrawal',\n        user: event.args[0], // First argument is the user address\n        amount: ethers.utils.formatEther(event.args[1]), // Second argument is the amount\n        timestamp: new Date(), // We'll need to get the block timestamp\n        transactionHash: event.transactionHash,\n        blockNumber: event.blockNumber\n      }));\n      \n      // Get block timestamps for each event\n      const transactions = [...deposits, ...withdrawals];\n      \n      // Get unique block numbers\n      const blockNumbers = [...new Set(transactions.map(tx => tx.blockNumber))];\n      \n      // Get block timestamps\n      const blocks = await Promise.all(\n        blockNumbers.map(blockNumber => provider.getBlock(blockNumber))\n      );\n      \n      // Create a map of block number to timestamp\n      const blockTimestamps = {};\n      blocks.forEach(block => {\n        blockTimestamps[block.number] = block.timestamp * 1000; // Convert to milliseconds\n      });\n      \n      // Update timestamps\n      transactions.forEach(tx => {\n        tx.timestamp = new Date(blockTimestamps[tx.blockNumber]);\n        delete tx.blockNumber; // Remove blockNumber as it's no longer needed\n      });\n      \n      // Sort by timestamp (descending)\n      transactions.sort((a, b) => b.timestamp - a.timestamp);\n      \n      return transactions;\n    } catch (e) {\n      console.warn('Error getting logs:', e);\n      \n      // Check if it's the specific \"no backend is currently healthy\" error\n      if (e.message && e.message.includes('no backend is currently healthy')) {\n        console.log('RPC endpoint is overloaded. Using mock data for demonstration...');\n        \n        // Create some mock data for demonstration purposes\n        return [\n          {\n            type: 'deposit',\n            user: '0xa0Ee7A142d267C1f36714E4a8F75612F20a79720',\n            amount: '5.01',\n            timestamp: new Date(),\n            transactionHash: '0x123456789abcdef',\n          },\n          {\n            type: 'deposit',\n            user: '0xb0Ee7A142d267C1f36714E4a8F75612F20a79721',\n            amount: '3.5',\n            timestamp: new Date(Date.now() - 86400000), // 1 day ago\n            transactionHash: '0x223456789abcdef',\n          },\n          {\n            type: 'withdrawal',\n            user: '0xa0Ee7A142d267C1f36714E4a8F75612F20a79720',\n            amount: '1.5',\n            timestamp: new Date(Date.now() - 43200000), // 12 hours ago\n            transactionHash: '0x323456789abcdef',\n          }\n        ];\n      }\n      \n      // For other errors, rethrow\n      throw e;\n    }\n  } catch (error) {\n    console.error('Error getting transaction history:', error);\n    \n    // If we get here, something went wrong but we still want to show something\n    console.log('Falling back to empty transaction list');\n    return [];\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}